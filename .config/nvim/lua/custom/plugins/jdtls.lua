return {}
-- return {
--   {
--     "neovim/nvim-lspconfig",
--     dependencies = { "mfussenegger/nvim-jdtls" },
--     opts = {
--       setup = {
--         jdtls = function(_, opts)
--           vim.api.nvim_create_autocmd("FileType", {
--             pattern = "java",
--             callback = function()
--               require("lazyvim.util").on_attach(function(_, buffer)
--                 set_generel_lsp_config(buffer)
--                 vim.keymap.set(
--                   "n",
--                   "<leader>di",
--                   "<Cmd>lua require'jdtls'.organize_imports()<CR>",
--                   { buffer = buffer, desc = "Organize Imports" }
--                 )
--                 vim.keymap.set(
--                   "n",
--                   "<leader>dt",
--                   "<Cmd>lua require'jdtls'.test_class()<CR>",
--                   { buffer = buffer, desc = "Test Class" }
--                 )
--                 vim.keymap.set(
--                   "n",
--                   "<leader>dn",
--                   "<Cmd>lua require'jdtls'.test_nearest_method()<CR>",
--                   { buffer = buffer, desc = "Test Nearest Method" }
--                 )
--                 vim.keymap.set(
--                   "v",
--                   "<leader>de",
--                   "<Esc><Cmd>lua require('jdtls').extract_variable(true)<CR>",
--                   { buffer = buffer, desc = "Extract Variable" }
--                 )
--                 vim.keymap.set(
--                   "n",
--                   "<leader>de",
--                   "<Cmd>lua require('jdtls').extract_variable()<CR>",
--                   { buffer = buffer, desc = "Extract Variable" }
--                 )
--                 vim.keymap.set(
--                   "v",
--                   "<leader>dm",
--                   "<Esc><Cmd>lua require('jdtls').extract_method(true)<CR>",
--                   { buffer = buffer, desc = "Extract Method" }
--                 )
--                 vim.keymap.set(
--                   "n",
--                   "<leader>cf",
--                   "<cmd>lua vim.lsp.buf.formatting()<CR>",
--                   { buffer = buffer, desc = "Format" }
--                 )
--               end)
--               local home = os.getenv('HOME')
--               local jdtls = require "jdtls";
--               local jdtls_install_path = home .. "/.local/share/nvim/mason/packages/jdtls/plugins"
--
--               -- File types that signify a Java project's root directory. This will be
--               -- used by eclipse to determine what constitutes a workspace
--               local root_markers = { 'gradlew', 'mvnw', '.git' }
--               local root_dir = require('jdtls.setup').find_root(root_markers)
--
--               -- eclipse.jdt.ls stores project specific data within a folder. If you are working
--               -- with multiple different projects, each project must use a dedicated data directory.
--               -- This variable is used to configure eclipse to use the directory name of the
--               -- current project found using the root_marker as the folder for project specific data.
--               local workspace_folder = home .. "/.local/share/eclipse/" .. vim.fn.fnamemodify(root_dir, ":p:h:t")
--
--               local config = {
--                 -- The command that starts the language server
--                 -- See: https://github.com/eclipse/eclipse.jdt.ls#running-from-the-command-line
--                 cmd = {
--
--                   "java", -- or '/path/to/java17_or_newer/bin/java'
--                   -- depends on if `java` is in your $PATH env variable and if it points to the right version.
--
--                   --"-javaagent:/home/jake/.local/share/java/lombok.jar",
--                   -- '-Xbootclasspath/a:/home/jake/.local/share/java/lombok.jar',
--                   "-Declipse.application=org.eclipse.jdt.ls.core.id1",
--                   "-Dosgi.bundles.defaultStartLevel=4",
--                   "-Declipse.product=org.eclipse.jdt.ls.core.product",
--                   "-Dlog.protocol=true",
--                   "-Dlog.level=ALL",
--                   -- '-noverify',
--                   "-Xms1g",
--                   "--add-modules=ALL-SYSTEM",
--                   "--add-opens",
--                   "java.base/java.util=ALL-UNNAMED",
--                   "--add-opens",
--                   "java.base/java.lang=ALL-UNNAMED",
--                   "-jar",
--                   vim.fn.glob("/usr/share/java/jdtls/plugins/org.eclipse.equinox.launcher_*.jar"),
--                   -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^
--                   -- Must point to the                                                     Change this to
--                   -- eclipse.jdt.ls installation                                           the actual version
--
--                   "-configuration",
--                   jdtls_install_path .. "/config_mac_arm",
--                   -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^^^^^
--                   -- Must point to the                      Change to one of `linux`, `win` or `mac`
--                   -- eclipse.jdt.ls installation            Depending on your system.
--
--                   -- See `data directory configuration` section in the README
--                   "-data",
--                   workspace_folder,
--                 },
--
--                 -- Here you can configure eclipse.jdt.ls specific settings
--                 -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request
--                 -- for a list of options
--                 settings = {
--                   java = {
--                     -- If you are developing in projects with different Java versions, you need
--                     -- to tell eclipse.jdt.ls to use the location of the JDK for your Java version
--                     -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request
--                     -- And search for `interface RuntimeOption`
--                     -- The `name` is NOT arbitrary, but must match one of the elements from `enum ExecutionEnvironment` in the link above
--                     configuration = {
--                       runtimes = {
--                         {
--                           name = "JavaSE-21",
--                           path = "/Library/Java/JavaVirtualMachines/amazon-corretto-21.jdk/Contents/Home",
--                         },
--                         {
--                           name = "JavaSE-17",
--                           path =
--                           "/Users/florianfindelsberger/Library/Java/JavaVirtualMachines/corretto-17.0.9/Contents/Home",
--                         },
--                         {
--                           name = "JavaSE-1.8",
--                           path =
--                           "/Users/florianfindelsberger/Library/Java/JavaVirtualMachines/corretto-1.8.0_392/Contents/Home"
--                         },
--                       }
--                     }
--                   },
--                 },
--                 handlers = {
--                   ["language/status"] = function(_, result)
--                     -- print(result)
--                   end,
--                   ["$/progress"] = function(_, result, ctx)
--                     -- disable progress updates.
--                   end,
--                 },
--               }
--               require("jdtls").start_or_attach(config)
--             end,
--           })
--           return true
--         end,
--       },
--     },
--   },
-- }
